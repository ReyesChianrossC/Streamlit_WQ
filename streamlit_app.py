# -*- coding: utf-8 -*-
"""Streamlit App for Water Quality Predictions

This app loads precomputed predictions from a parquet file and allows users to filter and view them.
"""

import streamlit as st
import pandas as pd
import numpy as np
import os

# Set page configuration
st.set_page_config(page_title="Water Quality Prediction Dashboard", layout="wide")

# Title and description
st.title("Water Quality Prediction Dashboard")
st.markdown("""
This dashboard displays water quality predictions generated by different models (CNN, LSTM, CNN-LSTM) for various time horizons.
Select a site, model, and prediction horizon to view the predicted values for water quality parameters.
""")

# File path for precomputed predictions
SITE_PREDICTIONS_PATH = "site_predictions.parquet"

# Check if the predictions file exists
if not os.path.exists(SITE_PREDICTIONS_PATH):
    st.error(f"Prediction file not found at {SITE_PREDICTIONS_PATH}. Please ensure the model prediction script has been run to generate the file.")
    st.stop()

# Load precomputed predictions
try:
    site_predictions = pd.read_parquet(SITE_PREDICTIONS_PATH)
except Exception as e:
    st.error(f"Error loading predictions: {e}")
    st.stop()

# Extract unique sites, models, and horizons
unique_sites = site_predictions['site'].dropna().unique()
unique_models = site_predictions['model'].unique()
unique_horizons = site_predictions['horizon'].unique()

# Sidebar for filtering
st.sidebar.header("Filter Options")
selected_site = st.sidebar.selectbox("Select Site", options=unique_sites)
selected_model = st.sidebar.selectbox("Select Model", options=unique_models)
selected_horizon = st.sidebar.selectbox("Select Prediction Horizon", options=unique_horizons)

# Filter predictions based on user selection
filtered_predictions = site_predictions[
    (site_predictions['site'] == selected_site) &
    (site_predictions['model'] == selected_model) &
    (site_predictions['horizon'] == selected_horizon)
]

# Display predictions
if not filtered_predictions.empty:
    st.header(f"Predictions for {selected_site} - {selected_model} ({selected_horizon})")
    
    # Extract prediction columns (e.g., pred_ammonia, pred_nitrate, etc.)
    pred_columns = [col for col in filtered_predictions.columns if col.startswith('pred_')]
    
    # Compute prediction variance for the selected model
    pred_values = filtered_predictions[pred_columns].values
    pred_std = np.std(pred_values, axis=0)
    st.write(f"**Prediction Variance (std) across parameters:** {pred_std}")
    
    # Display predictions in a table
    st.subheader("Predicted Values")
    display_df = filtered_predictions[pred_columns].reset_index(drop=True)
    display_df.columns = [col.replace('pred_', '').replace('_', ' ').title() for col in display_df.columns]
    
    # Use columns for better layout
    col1, col2 = st.columns(2)
    with col1:
        st.write("**Water Quality Parameters**")
        st.dataframe(display_df, use_container_width=True)
    
    with col2:
        st.write("**Summary Statistics**")
        st.write("Mean Predictions:")
        st.write(display_df.mean().to_frame().T)
        st.write("Standard Deviation:")
        st.write(display_df.std().to_frame().T)
else:
    st.warning("No predictions available for the selected combination. Please try a different site, model, or horizon.")

# Footer
st.markdown("---")
st.markdown("Developed with Streamlit | Data Source: Precomputed predictions from model_prediction.py")
